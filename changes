#!/usr/bin/env python3
#
# Copyright (c) 2021 InSeven Limited
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import collections
import copy
import enum
import logging
import os
import re
import subprocess
import sys
import tempfile


verbose = '--verbose' in sys.argv[1:] or '-v' in sys.argv[1:]
logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO, format="[%(levelname)s] %(message)s")


class Version(object):

    def __init__(self, major=0, minor=0, patch=0):
        self.major = major
        self.minor = minor
        self.patch = patch
        self.did_update_major = False
        self.did_update_minor = False
        self.did_update_patch = False

    def bump_major(self):
        if self.did_update_major:
            return
        self.major = self.major + 1
        self.minor = 0
        self.patch = 0
        self.did_update_major = True

    def bump_minor(self):
        if self.did_update_minor or self.did_update_major:
            return
        self.minor = self.minor + 1
        self.patch = 0
        self.did_update_minor = True

    def bump_patch(self):
        if self.did_update_patch or self.did_update_minor or self.did_update_major:
            return
        self.patch = self.patch + 1
        self.did_update_patch = True

    def __str__(self):
        return f"{self.major}.{self.minor}.{self.patch}"


def run(command, dry_run=False):
    if dry_run:
        logging.info(command)
        return []
    result = subprocess.run(command, capture_output=True)
    result.check_returncode()
    lines = result.stdout.decode("utf-8").strip().split("\n")
    return lines


def get_tags(sha):
    try:
        return run(["git", "describe", "--tags", "--exact-match", sha])
    except subprocess.CalledProcessError:
        return []


def parse_version(tag, scope=None):
    prefix = ""
    if scope is not None:
        prefix = scope + "_"
    sv_parser = re.compile(r"^" + prefix + r"(\d+).(\d+).(\d+)$")
    match = sv_parser.match(tag)
    if match:
        return Version(major=int(match.group(1)),
                       minor=int(match.group(2)),
                       patch=int(match.group(3)))
    raise ValueError("Not a version")


class Commit(object):

    def __init__(self, sha, message, tags, version):
        self.sha = sha
        self.message = message
        self.tags = tags
        self.version = version


class Type(enum.Enum):
    BREAKING_CHANGE = "BREAKING CHANGE"
    CI = "ci"
    DOCUMENTATION = "docs"
    FEATURE = "feat"
    FIX = "fix"
    UNKNOWN = "UNKNOWN"


def version_from_tags(tags, scope=None):
    for tag in tags:
        try:
            return parse_version(tag, scope)
        except ValueError:
            pass
    return None


def get_commits(scope=None, stop=lambda x: False):
    results = []
    command = ["git", "log", "--pretty=format:%H:%s"]
    try:
        commits = run(command)
    except subprocess.CalledProcessError as e:
        logging.error(e.stderr.decode("utf-8"))
        exit(1)
    for c in commits:
        sha, message = c.split(":", 1)
        commit = Commit(sha, parse_message(message), get_tags(sha), version_from_tags(get_tags(sha), scope))
        results.append(commit)
        if stop(commit):
            return results
    return results


OPERATIONS = {
    Type.BREAKING_CHANGE: lambda commit, version: version.bump_major(),
    Type.CI: None,
    Type.DOCUMENTATION: None,
    Type.FEATURE: lambda commit, version: version.bump_minor(),
    Type.FIX: lambda commit, version: version.bump_patch(),
    Type.UNKNOWN: None,
}


class Message(object):

    def __init__(self, type, scope, description):
        self.type = type
        self.scope = scope
        self.description = description


def parse_message(message):
    cc_parser = re.compile(r"^(.+?)(\((.+?)\))?:(.+)$")
    match = cc_parser.match(message)
    if match is not None:
        (cc_type, cc_scope, cc_description) = (match.group(1), match.group(3), match.group(4))
        try:
            return Message(type=Type(cc_type),
                           scope=cc_scope,
                           description=cc_description.strip())
        except ValueError:
            pass
    return Message(type=Type.UNKNOWN,
                   scope=None,
                   description=message.strip())


TYPE_TO_SECTION = {
    Type.BREAKING_CHANGE: "Changes",
    Type.CI: "Ignore",
    Type.DOCUMENTATION: "Ignore",
    Type.FEATURE: "Changes",
    Type.FIX: "Fixes",
    Type.UNKNOWN: "Ignore",
}


def format_messages(messages, section):
    result = ""
    result = result + f"**{section}**\n\n"
    for message in reversed(messages):
        result = result + f"- {message.description}"
        if message.scope is not None:
            result = result + f" ({message.scope})"
        result = result + "\n"
    return result


def format_changes(changes):
    result = ""
    sections = collections.defaultdict(list)
    for commit in changes:
        sections[TYPE_TO_SECTION[commit.message.type]].append(commit.message)
    content = []
    if "Changes" in sections:
        content.append(format_messages(sections["Changes"], "Changes"))
    if "Fixes" in sections:
        content.append(format_messages(sections["Fixes"], "Fixes"))
    return "\n".join(content)


def format_release(release):
    result = f"# {release.version}"
    if not release.has_tag:
        result = result + " (Unreleased)"
    result = result + "\n\n"
    result = result + format_changes(release.changes)
    return result


def format_releases(releases):
    result = ""
    for release in releases:
        result = result + format_release(release)
    return result


class Release(object):

    def __init__(self, version, changes):
        self.version = version
        self.changes = changes
        self.has_tag = False  # TODO: Rename this to 'unreleased'

    def set_previous_version(self, previous_version):
        """Recomputes the current version based on the previous version by applying the changes in order."""
        self.version = copy.deepcopy(previous_version)
        for commit in reversed(self.changes):
            if commit.message.type in OPERATIONS and OPERATIONS[commit.message.type] is not None:
                OPERATIONS[commit.message.type](commit, self.version)
            else:
                logging.warning("Ignoring commit: '%s'", commit.message.description)

    @property
    def is_empty(self):
        for change in self.changes:
            if OPERATIONS[change.message.type] is not None:
                return False
        return True


def command_current_version(parser):
    def perform(options, releases):
        print(releases[0].version)
    return perform


def command_current_notes(parser):
    def perform(options, releases):
        print(format_changes(releases[0].changes), end="")
    return perform


def command_released_version(parser):
    def perform(options, releases):
        active_release = next(release for release in releases if release.has_tag)
        print(active_release.version)
    return perform


def command_release(parser):
    parser.add_argument("--skip-if-empty", action="store_true", default=False, help="exit cleanly if there are no changes to release")
    parser.add_argument("--command", help="command to run to perform the release")
    parser.add_argument("--push", action="store_true", default=False, help="push the newly created tag")
    parser.add_argument("--dry-run", action="store_true", default=False, help="just log the operations to be performed")
    def perform(options, releases):
        if releases[0].has_tag:
            # There aren't any unreleased versions.
            if options.skip_if_empty:
                exit()
            logging.error("No versions to release.")
            exit(1)
        version = releases[0].version
        logging.info("Releasing %s...", version)
        tag = str(version)
        if options.scope is not None:
            tag = f"{options.scope}_{tag}"
        logging.info("Creating tag '%s'...", tag)
        run(["git", "tag", tag], dry_run=options.dry_run)

        title = str(version)
        if options.scope is not None:
            title = f"{options.scope} {title}"

        if options.push:
            logging.info("Pushing tag '%s'...", tag)
            run(["git", "push", "origin", tag], dry_run=options.dry_run)

        if options.command is not None:
            logging.info("Running command...")
            success = True

            notes = format_changes(releases[0].changes)

            # Create a temporary directory containing the notes.
            with tempfile.NamedTemporaryFile() as notes_file:
                with open(notes_file.name, "w") as fh:
                    fh.write(notes)

                # Set up the environment.
                env = copy.deepcopy(os.environ)
                env['CHANGES_TITLE'] = title
                env['CHANGES_VERSION'] = str(version)
                env['CHANGES_TAG'] = tag
                env['CHANGES_NOTES'] = notes
                env['CHANGES_NOTES_FILE'] = notes_file.name

                # Run the command.
                if options.dry_run:
                    logging.info(options.command)
                else:
                    result = subprocess.run(options.command, shell=True, capture_output=True, env=env)
                    try:
                        result.check_returncode()
                        logging.info(result.stdout.decode("utf-8").strip())
                    except subprocess.CalledProcessError as e:
                        logging.error("Release command failed with error '%s'; reverting release.", e.stderr.decode("utf-8").strip())
                        run(["git", "tag", "-d", tag])
                        run(["git", "push", "origin", f":{tag}"])
                        success = False

            if not success:
                exit(1)

        logging.info("Done.")

    return perform


def command_all_changes(parser):
    def perform(options, releases):
        print(format_releases(releases), end="")
    return perform


COMMANDS = {
    "current-version": (command_current_version, "current version accounting for the unreleased changes, or released vesrion if there are no unreleased changes"),
    "current-notes": (command_current_notes, "formatted output of all unreleased changes, or changes in the released version if there are no unreleased changes"),
    "released-version": (command_released_version, "released version number as given by the most recent git version tag"),
    "release": (command_release, "a"),
    "all-changes": (command_all_changes, "a"),
}


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--scope", help="scope to be used in tags and commit messages")
    parser.add_argument('--verbose', '-v', action='store_true', default=False, help="show verbose output")
    subparsers = parser.add_subparsers(help="command")
    for command, details in COMMANDS.items():
        subparser = subparsers.add_parser(command, help=details[1])
        subparser.set_defaults(fn=details[0](subparser))
    options = parser.parse_args()

    # Get all the changes on the main branch.
    all_changes = get_commits(scope=options.scope)

    # Group the changes by release.
    releases = []
    releases.append(Release(None, []))
    for change in all_changes:
        if change.version is not None:
            release = Release(change.version, [])
            release.has_tag = True
            releases.append(release)
        releases[-1].changes.append(change)

    # Fix-up the version number for any un-released current release.
    if releases[0].version is None:
        releases[0].set_previous_version(releases[1].version if len(releases) > 1 else Version(0, 0, 0))

    # Remove the empty head release if there's already an active release.
    if len(releases) > 1 and releases[0].is_empty:
        releases.pop(0)

    # Run the command.
    if 'fn' not in options:
        logging.error("No command specified.")
        exit(1)
    options.fn(options, releases)


if __name__ == "__main__":
    main()
